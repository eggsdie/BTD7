import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.geom.RoundRectangle2D;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

public class BTD7 extends JPanel {
    private static final int BUTTON_WIDTH = 200;
    private static final int BUTTON_HEIGHT = 50;
    private static final int BUTTON_Y_GAP = 100;

    enum State {
        Menu,
        Game,
        Settings,
        GameOver
    };
    enum Buttons{
    	none,
    	placeTack,
    	placeSniper,
    	upgrade
    }
    
    State state;
    Buttons button;
    BufferedImage menuBackground;
    BufferedImage gameBackground;
    BufferedImage tack;
    BufferedImage tack2;
    BufferedImage tack3;
    BufferedImage tack4;
    
    BufferedImage sniper;
    BufferedImage sniper2;
    BufferedImage sniper3;
    BufferedImage sniper4;
    
    BufferedImage red;
    String howToPlayText;
    int money = 2000;
    int coordX;
    int coordY;
    int round = 1;
    int lives =100;
    boolean gameStart = false;
    public Board map;
    static Balloon one = new Balloon(5,205,2,5, 50,"right");
    static Balloon two = new Balloon(-20,205,2,5, 50,"right");
    static Balloon three = new Balloon(-45,205,2,5, 50,"right");
    static Balloon four = new Balloon(-70,205,2,5, 50,"right");
    static Balloon five = new Balloon(-95,205,2,5, 50,"right");
    static Balloon six = new Balloon(-120,205,2,5, 50,"right");
    static Balloon seven = new Balloon(-145,205,2,5, 50,"right");
    static Balloon eight = new Balloon(-170,205,2,5, 50,"right");
    static Balloon nine = new Balloon(-195,205,2,5, 50,"right");
    static Balloon ten = new Balloon(-225,205,1,25, 150,"right");
    static ArrayList<Balloon> bList = new ArrayList<>();{
	    bList.add(one);
	    bList.add(two);
	    bList.add(three);
	    bList.add(four);
	    bList.add(five);
	    bList.add(six);
	    bList.add(seven);
	    bList.add(eight);
	    bList.add(nine);
	    bList.add(ten);
    }
    public BTD7() {
    	
        state = State.Menu;
        map = new Board(12,7);
        try {
        	gameBackground = ImageIO.read(new File("map.png"));
            menuBackground = ImageIO.read(new File("menu.png"));
            tack = ImageIO.read(new File("tack1.png"));
            tack2 = ImageIO.read(new File("tack2.png"));
            tack3 = ImageIO.read(new File("tack3.png"));
            tack4 = ImageIO.read(new File("tack4.png"));
            sniper = ImageIO.read(new File("sniper1.png"));
            sniper2 = ImageIO.read(new File("sniper2.png"));
            sniper3 = ImageIO.read(new File("sniper3.png"));
            sniper4 = ImageIO.read(new File("sniper4.png"));
            red = ImageIO.read(new File("red.png"));
        } catch (IOException e) {
            System.out.println("Error loading background image.");
            e.printStackTrace();
        }

        howToPlayText ="Game BTD7 Click to play";
        
        addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
            	Graphics g = getGraphics();
            	Graphics2D g2d = (Graphics2D) getGraphics();
                if (state == State.Menu) {
                    int buttonX = (getWidth() - BUTTON_WIDTH) / 2;
                    if (e.getX() >= buttonX && e.getX() <= buttonX + BUTTON_WIDTH) {
                        if (e.getY() >= getHeight() / 2 && e.getY() <= getHeight() / 2 + BUTTON_HEIGHT) {
                            state = State.Game;
                            
                        } else if (e.getY() >= getHeight() / 2 + BUTTON_Y_GAP && e.getY() <= getHeight() / 2 + BUTTON_Y_GAP + BUTTON_HEIGHT) {
                            state = State.Settings;
                        }
                        repaint();
                    }
                }
                else if (state== State.Game) {
                	if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=150&& e.getY() >= 50) {
                		if(money>=300) {
                			button=Buttons.placeTack;
                		}
                		
                	}
                	else if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=300&& e.getY() >= 200) {
                		if(money>=500) {
                			button=Buttons.placeSniper;
                		}
                	}
                	else if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=450&& e.getY() >= 350) {
                		if(money>=300) {
                		button = Buttons.upgrade;
                		}
                	}
                }
                
                
                if(button==Buttons.placeTack) {
                	if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=650&& e.getY() >= 550) {//cancel
                		button=Buttons.none;
                	}
                	else if(e.getX() <1200){
                		coordX = (e.getX()-3)/100+1;
                		coordY = e.getY()/100+1;
                		if((coordX<=8&&coordY==3)||coordX==6||(coordX==7&&coordY==1)||(coordX==8&&coordY<=2)||(coordX>=4&&coordY==5)||(coordX==4&&coordY>=6)||(coordX==5&&coordY==7)) {
                			System.out.println("Invalid position");
                			button = Buttons.none;
                		}
                		else {
                			if(!map.isTowerAt(coordX-1, coordY-1)) {
                				money-=300;
                				map.placeTack(coordX-1, coordY-1, g2d);
                    			System.out.println(coordX+","+coordY);
                    			gameStart = true;
                			}
                			else {
                				System.out.println("Invalid position");
                				button = Buttons.none;
                			}
                			
                			drawButton(g2d, "", 10, 5, 155, 30,Color.WHITE, Color.WHITE);
                            g.setFont(new Font("Arial", Font.PLAIN, 28));
                            g.drawString("Money:" +money, 15, 30);
                            button = Buttons.none;
                    		
                		}
                		
                	}
                }
                else if(button==Buttons.placeSniper) {
                	if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=650&& e.getY() >= 550) {
                		button = Buttons.none;
                	}
                	else if(e.getX() <1200){
                		coordX = (e.getX()-3)/100+1;
                		coordY = e.getY()/100+1;
                		if((coordX<=8&&coordY==3)||coordX==6||(coordX==7&&coordY==1)||(coordX==8&&coordY<=2)||(coordX>=4&&coordY==5)||(coordX==4&&coordY>=6)||(coordX==5&&coordY==7)) {
                			System.out.println("Invalid position");
                			button = Buttons.none;
                		}
                		else {
                			if(!map.isTowerAt(coordX-1, coordY-1)) {
                				money-=500;
                				map.placeSniper(coordX-1, coordY-1, g2d);
                				
                    			System.out.println(coordX+","+coordY);
                    			gameStart = true;
                			}
                			else {
                				System.out.println("Invalid position");
                				button = Buttons.none;
                			}
                			
                			drawButton(g2d, "", 10, 5, 155, 30,Color.WHITE, Color.WHITE);
                            g.setFont(new Font("Arial", Font.PLAIN, 28));
                            g.drawString("Money:" +money, 15, 30);
                            button = Buttons.none;
                    		
                		}
                		
                	}
                }
                else if(button==Buttons.upgrade) {
                	if(e.getX() >= 1220 && e.getX() <=1320&&e.getY() <=650&& e.getY() >= 550) {
                		button = Buttons.none;
                	}
                	else if(e.getX() <1200){
                		coordX = (e.getX()-3)/100+1;
                		coordY = e.getY()/100+1;
                		if(map.upgradeTack(coordX-1, coordY-1)==1) {
                			money-=300;
                			button=Buttons.none;
                		}
                		if(money>=500) {
                			if(map.upgradeSniper(coordX-1, coordY-1)==1) {
                    			money-=500;
                    			button=Buttons.none;
                    		}
                		}
                		
                		else {
                			System.out.println("Invalid upgrade");
                			button=Buttons.none;
                		}
                	}
                }
                

            }
        });
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        if(lives <= 0) {
            g2d.setColor(Color.BLACK);
            state=State.GameOver;
            g2d.setFont(new Font("Arial", Font.BOLD, 50));
            g2d.drawString("Game Over", getWidth()/2 - 100, getHeight()/2);
            return;
        }
        
        	if(state==State.Menu) {
        		g.drawImage(menuBackground, 0, 0, this.getWidth(), this.getHeight(), this);
                drawButton(g2d, "Start", (getWidth() - BUTTON_WIDTH) / 2, getHeight() / 2, BUTTON_WIDTH, BUTTON_HEIGHT, Color.BLUE, Color.CYAN);
                drawButton(g2d, "Settings", (getWidth() - BUTTON_WIDTH) / 2, getHeight() / 2 + BUTTON_Y_GAP, BUTTON_WIDTH, BUTTON_HEIGHT, Color.MAGENTA, Color.PINK);
        	}
        else if (state== State.Game) {
        	
            	g.drawImage(gameBackground, 0, 0, this);
                g2d.setColor(Color.BLACK);
                drawButton(g2d, "", 10, 5, 155, 30,Color.BLACK, Color.BLACK);
                g.setFont(new Font("Arial", Font.PLAIN, 28));
                g2d.drawString("Round: "+round, 1085, 30);
                g2d.drawString("Lives: "+lives, 1070, 55);
                g.drawString("Money:" +money, 10, 30);
                drawButton(g2d, "", 1220, 50, 100, 100,Color.BLUE, Color.BLUE);
                drawButton(g2d, "", 1220, 200, 100, 100,Color.BLUE, Color.BLUE);
                g.setFont(new Font("Arial", Font.PLAIN, 24));
                drawButton(g2d, "", 1220, 350, 100, 100,Color.BLUE, Color.BLUE);
                g.drawString("Upgrade", 1223, 405);
                g.drawImage(tack, 1234, 64, this);
                g.setColor(Color.BLACK);
                g.drawString("$300", 1242, 170);
                g.drawImage(sniper, 1237, 200, this);
                g.drawString("$500", 1242, 320);
                
        }
        else if(state == State.Settings) {
                g2d.setColor(Color.BLACK);
                g2d.setFont(new Font("Arial", Font.PLAIN, 20));
                drawString(g2d, howToPlayText, 100, 100);
        }
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j <12; j++) {
            	if (Board.getMap(j,i) == 'T') {
            		drawTack(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'Y') {
            		drawTack2(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'U') {
            		drawTack3(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'I') {
            		drawTack4(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'S') {
            		drawSniper(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'D') {
            		drawSniper2(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'F') {
            		drawSniper3(g2d, j+1, i+1);
            	}
            	else if (Board.getMap(j,i) == 'G') {
            		drawSniper4(g2d, j+1, i+1);
            	}
            }
        }
        if(button==Buttons.placeTack||button==Buttons.placeSniper||button==Buttons.upgrade) {
        	g2d.setFont(new Font("Arial", Font.PLAIN, 12));
            drawButton(g2d, "Cancel", 1220, 550, 100, 100, Color.gray, Color.RED);
        }
        

        if(gameStart==true) {
        	for(int i = 0; i < bList.size(); i++) {
        		move(bList.get(i), map, g);
        	}
        	Iterator<Balloon> it = bList.iterator();
        	while (it.hasNext()) {
        	    Balloon b = it.next();
        	    move(b, map, g);
        	    if (b.getHealth() <= 0) {
        	        it.remove(); // This safely removes the balloon from the list
        	    }
        	}

        }
        
       
        repaint();
    }
    public void move(Balloon b, Board board, Graphics g) {
        if(lives <= 0) return;

        if(b.getHealth() > 0) {
            try {
                Thread.sleep(1);
                g.drawImage(red, b.getX(), b.getY(), this);

                int balloonX = b.getX();
                int balloonY = b.getY();
                System.out.println("Coords:"+balloonX+","+balloonY);
                if(checkBalloonProximity(balloonX,balloonY)) {
                	System.out.println("pop");
                    b.setHealth(b.getHealth() - 1);
                    if (b.getHealth() <= 0) {
                        return;
                    }
                }

                // Your existing direction change logic starts here

                if(b.getDirection().equals("right")) {
                    b.setX(balloonX + round + b.getSpeed());
                }
                else if(b.getDirection().equals("left")) {
                    b.setX(balloonX - b.getSpeed() - round);       
                }
                else if(b.getDirection().equals("up")) {
                    b.setY(balloonY - b.getSpeed() - round);
                }
                else if(b.getDirection().equals("down")) {
                    b.setY(balloonY + b.getSpeed() + round);
                }
                if(b.getX()>715&&b.getX()<800&&b.getY()>200&&b.getY()<300) {
                    b.setDirection("up");
                }
                else if(b.getX()>715&&b.getX()<800&&b.getY()>0&&b.getY()<5) {
                    b.setDirection("left");
                }
                else if(b.getX()>475&&b.getX()<520&&b.getY()>0&&b.getY()<100) {
                    b.setDirection("down");
                }
                else if(b.getX()>475&&b.getX()<520&&b.getY()>605&&b.getY()<700) {
                    b.setDirection("left");
                }
                else if(b.getX()>275&&b.getX()<320&&b.getY()>600&&b.getY()<700) {
                    b.setDirection("up");
                }
                else if(b.getX()>275&&b.getX()<320&&b.getY()>300&&b.getY()<410) {
                    b.setDirection("right");
                }
                else if(b.getX()>1150) {
                    lives -= b.getHealth();
                    b.setHealth(0); // set the balloon health to 0, so it will stop moving
                    if(lives < 0) {
                        // Game over
                    }
                }
                
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }



        
    


	private void drawTack(Graphics g, int x, int y) {
    	g.drawImage(tack, x*100-85, y*100-85, this);
    }
    private void drawTack2(Graphics g, int x, int y) {
    	g.drawImage(tack2, x*100-85, y*100-95, this);
    }
    private void drawTack3(Graphics g, int x, int y) {
    	g.drawImage(tack3, x*100-85, y*100-85, this);
    }
    private void drawTack4(Graphics g, int x, int y) {
    	g.drawImage(tack4, x*100-85, y*100-95, this);
    }
    private void drawSniper(Graphics g, int x, int y) {
    	g.drawImage(sniper, x*100-80, y*100-100, this);
    }
    private void drawSniper2(Graphics g, int x, int y) {
    	g.drawImage(sniper2, x*100-80, y*100-100, this);
    }
    private void drawSniper3(Graphics g, int x, int y) {
    	g.drawImage(sniper3, x*100-80, y*100-100, this);
    }
    private void drawSniper4(Graphics g, int x, int y) {
    	g.drawImage(sniper4, x*100-80, y*100-100, this);
    }
    private void drawButton(Graphics2D g, String text, int x, int y, int width, int height, Color color1, Color color2) {
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        GradientPaint gradient = new GradientPaint(x, y, color1, x + width / 2, y + height / 2, color2, true);
        g.setPaint(gradient);

        RoundRectangle2D.Double rect = new RoundRectangle2D.Double(x, y, width, height, 20, 20);
        g.fill(rect);

        g.setColor(Color.WHITE);
        g.drawString(text, x + width / 2 - 20, y + height / 2 + 5);
    }


    private void drawString(Graphics g, String text, int x, int y) {
        for (String line : text.split("<br>"))
            g.drawString(line, x, y += g.getFontMetrics().getHeight());
    }

    public static void main(String[] args) {
    	
        
        JFrame frame = new JFrame("Tower Defense");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1350, 738);
        BTD7 panel = new BTD7();
        frame.add(panel);
        frame.setVisible(true);
    }
}
