public class Balloon implements Runnable {
    private int x;
    private int y;
    private int speed;
    private int health;
    private int money;

    public Balloon(int x, int y, int speed, int health, int money) {
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.health = health;
        this.money = money;
        try {
            this.followPath();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    private String nextMove;  // add this field


    // ...

    public void move() throws InterruptedException {
        switch (nextMove) {
            case "right":
                moveRight(1);
                // logic to update nextMove based on the current position and path...
                break;
            case "up":
                moveUp(1);
                // logic to update nextMove...
                break;
            // handle other directions...
        }
    }
    public void followPath() throws InterruptedException {
        this.moveRight(7);
        this.moveUp(2);
        this.moveLeft(2);
        this.moveDown(6);
        this.moveLeft(2);
        this.moveUp(2);
        this.moveRight(8);
        // Balloon has reached the end
    }
    // Implement these methods. Modify the logic as needed, consider the balloon's speed
    private void moveRight(int steps) throws InterruptedException {
        for (int i = 0; i < steps; i++) {
            this.x++;
            System.out.println("Moving right to: " + this.x + ", " + this.y);
            Thread.sleep(10 * this.speed);
        }
    }

    private void moveUp(int steps) throws InterruptedException {
        for (int i = 0; i < steps; i++) {
            this.y--;
            Thread.sleep(10 * this.speed);
        }
    }

    private void moveLeft(int steps) throws InterruptedException {
        for (int i = 0; i < steps; i++) {
            this.x--;
            Thread.sleep(10 * this.speed);
        }
    }

    private void moveDown(int steps) throws InterruptedException {
        for (int i = 0; i < steps; i++) {
            this.y++;
            Thread.sleep(10 * this.speed);
        }
    }
    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public int getHealth() {
        return health;
    }

    public void setHealth(int health) {
        this.health = health;
    }

    public int getMoney() {
        return money;
    }

    public void setMoney(int money) {
        this.money = money;
    }
    public void run() {
        try {
            while (true) {
                move();
                Thread.sleep(10 * this.speed);  // pause after each step
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String toString() {
        return "Balloon{" +
                "x=" + x +
                ", y=" + y +
                ", speed=" + speed +
                ", health=" + health +
                ", money=" + money +
                '}';
    }
}
